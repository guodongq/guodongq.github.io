<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bruce&#39;s Notes</title>
  
  
  <link href="https://guodongq.github.io/atom.xml" rel="self"/>
  
  <link href="https://guodongq.github.io/"/>
  <updated>2021-02-06T11:21:19.104Z</updated>
  <id>https://guodongq.github.io/</id>
  
  <author>
    <name>guodongq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RESTful框架之echo</title>
    <link href="https://guodongq.github.io/2019-04-12-golang-echo/"/>
    <id>https://guodongq.github.io/2019-04-12-golang-echo/</id>
    <published>2021-02-06T11:21:19.104Z</published>
    <updated>2021-02-06T11:21:19.104Z</updated>
    
    <content type="html"><![CDATA[<p>Quick  start  for RESTful framework echo.</p><a id="more"></a><h1 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h1><p><a href="https://echo.labstack.com/guide">Echo</a>是一个高性能、可扩展、<strong>极简主义的golang web框架</strong>。它具有下面的特点：</p><ul><li>高效的路由</li><li>支持http/2</li><li>简单的数据绑定与渲染 支持json、xml、html和文件等</li><li>丰富的<code>Middleware</code> 支持内置和自定义的<code>Middleware</code></li></ul><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/labstack/<span class="built_in">echo</span></span><br></pre></td></tr></table></figure><p>下面是一个hello world示例。</p><p>例1：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/labstack/echo&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c.String(http.StatusOK, <span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    e.Logger.Fatal(e.Start(<span class="string">&quot;0.0.0.0:1323&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>echo.New()</code>用于创建一个新的echo实例，<code>e.Start(&quot;0.0.0.0:1323&quot;)</code>用来在<code>:1323</code>端口上启动server监听。这里也可以使用自定义的server，用来自定义相关参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">e := echo.New()</span><br><span class="line">s := &amp;http.Server&#123;</span><br><span class="line">    Addr:         <span class="string">&quot;0.0.0.0:1323&quot;</span>,</span><br><span class="line">    ReadTimeout:  time.Minute * <span class="number">2</span>,</span><br><span class="line">    WriteTimeout: time.Minute * <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">e.StartServer(s)</span><br></pre></td></tr></table></figure><p><code>e.GET(&quot;/&quot;, func(c echo.Context) error &#123;...&#125;)</code>方法即是echo的路由，将GET方法的”/“路径请求映射到相应的handle方法。</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>echo的路由算法基于<code>radix tree</code>，速度非常快；并且内部实现使用了<code>sync.Pool</code>以使得其内存消耗少，GC压力小。</p><p>常规的，可以通过http请求方法将url路径和handle方法绑定在一起，如例1示。也可以使用<code>e.Any(&quot;/&quot;, func(c echo.context) error &#123;...&#125;)</code>。</p><p>echo也支持路径参数和匹配。echo的所有路由方法都会放回一个<code>*echo.Route</code>对象。</p><p>更为使用的是echo的路由分组功能：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">g := e.Group(<span class="string">&quot;/hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">g.POST(<span class="string">&quot;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    name := context.FormValue(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> context.String(http.StatusOK, <span class="string">&quot;hello, &quot;</span>+name+<span class="string">&quot;.&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">g.GET(<span class="string">&quot;/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    id := context.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    name := context.QueryParam(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    e.Logger.Infof(<span class="string">&quot;test e.logger&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> context.JSON(http.StatusOK, <span class="string">&quot;hello, &quot;</span>+id+name)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此外，<code>e.URI(HandlerFunc, ...interface&#123;&#125;)</code>可以根据handler和url中的参数得到URI；<code>e.Routes()</code>用来返回当前echo实例<code>e</code>中注册的所有路由对象的切片。</p><h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><p><code>echo.Context</code>封装了所有请求消息的上下文，包括请求和响应的引用、路径、参数、请求数据等等。echo的handler只需要传入一个<code>echo.Context</code>实例即可。</p><p><code>echo.Context</code>可以通过其方法<code>c.Param(&quot;id&quot;)</code>获取路径参数，通过<code>c.QueryParam(&quot;name&quot;)</code>获取请求参数。请过<code>c.FormValue(&quot;name&quot;)</code>获取<code>form-data</code>，…</p><p>此外<code>c.Bind(interface&#123;&#125;)</code>也可以用来绑定请求数据到一个golang的结构提上去：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="keyword">string</span> <span class="string">`json:&quot;name&quot; from:&quot;name&quot; query:&quot;name&quot;`</span></span><br><span class="line">    Id    <span class="keyword">string</span> <span class="string">`json:&quot;id&quot; from:&quot;id&quot; query:&quot;id&quot;`</span></span><br><span class="line">    Phone <span class="keyword">string</span> <span class="string">`json:&quot;phone&quot; from:&quot;phone&quot; query:&quot;phone&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line"></span><br><span class="line">    e.ANY(<span class="string">&quot;/save&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        user := <span class="built_in">new</span>(User)</span><br><span class="line"></span><br><span class="line">        err := context.Bind(user)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            e.Logger.Errorf(<span class="string">&quot;bind data failed, err : %v&quot;</span>, err)</span><br><span class="line">            context.String(http.StatusBadRequest, err.Error())</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> context.JSONPretty(http.StatusOK, user, <span class="string">&quot;  &quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行这个示例后，可以通过以下任意请求得到正确的响应：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST http://10.62.127.88:1323/save \</span><br><span class="line">-H <span class="string">&#x27;Content-Type=application/json&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;&#123;&quot;name&quot; : &quot;jmz&quot;,&quot;id&quot; : &quot;21131&quot;,&quot;phone&quot; : &quot;13661541330&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST http://10.62.127.88:1323/save \</span><br><span class="line">-H <span class="string">&#x27;Content-Type=application/x-www-form-urlencoded&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;name=jmz&#x27;</span> -d <span class="string">&#x27;id=21131&#x27;</span> -d <span class="string">&#x27;phone=13661541330&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET http://10.62.127.88:1323/save?name=jmz&amp;id=21131&amp;phone=13661541330</span><br></pre></td></tr></table></figure><p>echo没有内建请求数据验证功能，但是提供了<code>e.Validator</code>接收自定义的数据验证模块，如使用<a href="https://github.com/go-playground/validator">validator</a>等第三方验证模块。</p><p>可以通过方法<code>c.Request()</code>放回一个<code>*http.Request</code>对象，并从中取得请求的所有参数，包括请求头，请求体，URL，方法等。</p><p>数据渲染方面，echo支持text，json，xml，html，File，stream等诸多常见格式。echo是通过<code>echo.Context</code>中的相应方法来渲染数据的。</p><p>常见的响应数据渲染方法包括：</p><ul><li><code>c.NoContent(http.StatusOK)</code> 仅有返回码，无content</li><li><code>c.JSON(http.StatusOK, user)</code> 以<code>application/json</code>类型返回<code>user</code>对象的json数据</li><li><code>c.JSONPretty(http.StatusOK, user, &quot;  &quot;)</code> 以可读的方式放回<code>user</code>的json数据</li><li><code>c.String(http.StatusOK, &quot;hello, world.&quot;)</code> 以文本格式(<code>text/plain</code>)响应请求</li><li><code>c.File(fileName)</code> 以<code>fileName</code>指定的文件响应请求</li><li><code>c.Blob(http.StatusOK, &quot;text/csv&quot;, data)</code> 以指定的<code>Content-Type</code>返回任意<code>[]byte</code>数据</li><li><code>c.Stream(http.StatusOK, &quot;image/png&quot;, pic)</code> 以指定的<code>Content-Type</code>返回任意数据流</li><li><code>c.Redirect(http.StatusMovedPermanently, &quot;http://10.62.127.88:1323/log&quot;)</code> 用来重定向请求到指定的url</li></ul><p>此外，echo还为响应提供了Hook方法，可以在每次写response前后调用hook进行相关操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">e.GET(<span class="string">&quot;/picture&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    pic, err := os.Open(<span class="string">&quot;/home/juc.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c.String(http.StatusNotFound, <span class="string">&quot;image not found.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> start time.Time</span><br><span class="line"></span><br><span class="line">    c.Response().Before(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        start = time.Now()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    c.Response().After(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        e.Logger.Infof(<span class="string">&quot;write picture caused %v&quot;</span>, time.Since(start))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c.Stream(http.StatusOK, <span class="string">&quot;image/png&quot;</span>, pic)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="一个echo实现的文件上传和下载的示例"><a href="#一个echo实现的文件上传和下载的示例" class="headerlink" title="一个echo实现的文件上传和下载的示例"></a>一个echo实现的文件上传和下载的示例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/labstack/echo&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploadDir = <span class="string">&quot;/home/testUpload/&quot;</span></span><br><span class="line"><span class="keyword">var</span> downloadDir = <span class="string">&quot;/root/gopackage/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line"></span><br><span class="line">    s := &amp;http.Server&#123;</span><br><span class="line">        Addr:         <span class="string">&quot;0.0.0.0:1324&quot;</span>,</span><br><span class="line">        ReadTimeout:  time.Minute * <span class="number">2</span>,</span><br><span class="line">        WriteTimeout: time.Minute * <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    e.GET(<span class="string">&quot;/download/:file&quot;</span>, download)</span><br><span class="line"></span><br><span class="line">    e.POST(<span class="string">&quot;/upload&quot;</span>, upload)</span><br><span class="line"></span><br><span class="line">    e.Logger.Fatal(e.StartServer(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    fileName := c.Param(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c.File(downloadDir + fileName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">upload</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// Source</span></span><br><span class="line">    file, err := c.FormFile(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    src, err := file.Open()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> src.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Destination</span></span><br><span class="line">    dst, err := os.Create(uploadDir + file.Filename)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> dst.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy</span></span><br><span class="line">    <span class="keyword">if</span> _, err = io.Copy(dst, src); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c.String(http.StatusOK, fmt.Sprintf(<span class="string">&quot;File %s uploaded successfully.&quot;</span>, file.Filename))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，文件上传时，请求的<code>Content-Type</code>必须为<code>multipart/form-data</code>，body里的key为<code>test</code>，type为<code>file</code>，value中则是要上传的文件。</p><h2 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h2><p>MiddleWare是一个函数，这个函数能够嵌入到一对请求-响应中，并获取<code>echo.Context</code>对象以进行一些操作action，功能有点类似于Spring Framework中的拦截器。例如<code>middleware.Logger()</code>就可以对将所有的用户请求打印到日志。</p><p>echo的中间件按照作用范围和执行时机分类大概有四个类别：</p><h3 id="Before-Route-Root-level"><a href="#Before-Route-Root-level" class="headerlink" title="Before Route(Root level)"></a>Before Route(Root level)</h3><p>这个级别的middleware在请求被路由之前执行action，这类middleware通过<code>echo.Pre()</code>注册。由于作用于路由之前，所有这类middleware不能够访问和操作<code>echo.Context</code>。常用内置的这类middleware包括：</p><ul><li><code>middleware.HTTPSRedirect()</code> 可以将http请求重定向为https请求</li><li><code>middleware.HTTPSWWWRedirect()</code> 可以将http请求重定向到<a href="http://www.***请求/">http://www.***请求</a></li></ul><p>等等。</p><h3 id="After-Route-Root-level"><a href="#After-Route-Root-level" class="headerlink" title="After Route(Root level)"></a>After Route(Root level)</h3><p>这个类型的middleware使用<code>echo.Use()</code>函数注册。middleware的action在请求路由处理完成后执行，因此可以访问请求的<code>echo.Context</code>，所以也注定有着更为广泛的用途，常见的包括日志、压缩、安全认证、请求限制等等。</p><h3 id="Group-level"><a href="#Group-level" class="headerlink" title="Group level"></a>Group level</h3><p>通过<code>e.Group(path, middleware)</code>方法在创建group是指定一个或多个middlewares，作用域仅仅为当前的路由分组，也可以使用<code>g.Use()</code>来注册middlewares。</p><h3 id="Route-level"><a href="#Route-level" class="headerlink" title="Route level"></a>Route level</h3><p>这种middleware在创建路由时指定，middleware的action仅能够对相应的请求起作用。</p><h3 id="自定义middleware"><a href="#自定义middleware" class="headerlink" title="自定义middleware"></a>自定义middleware</h3><p>middleware是一个能够返回<code>HandlerFunc func(Context) error</code>类型函数的函数。通常，还可以通过为middleware配置一个<code>Skipper</code>来指定middleware对那些路由执行action。</p><h3 id="内建的中间件"><a href="#内建的中间件" class="headerlink" title="内建的中间件"></a>内建的中间件</h3><ul><li><code>CORS</code> 跨域设置中间件，默认为允许来自所有域的访问，echo默认内置了该中间件。也可以通过<code>middleware.CORSWithConfig(middleware.CORSConfig)</code>来自定义跨域配置，其中<code>middleware.CORSConfig</code>的主要配置项包括<ul><li><code>Skipper</code>，用来决定哪些路由需要执行action</li><li><code>AllowOrigins</code> 定义了可以访问资源的域的集合</li><li><code>AllowMethods</code> 定义了允许访问资源的请求方法</li><li><code>AllowHeaders</code> 定义了可以用来请求资源的请求体</li></ul></li><li><code>CSRF</code> 跨站请求伪造中间件，又称<code>XSRF</code>。echo内置的CSRF中间件通过请求体的<code>X-CSRF-Token</code>来防止跨站伪造</li><li>安全认证类中间件，内置的包括<code>Basic Auth</code>、<code>Casbin Auth</code>、<code>Key Auth</code>、<code>Secure</code>等</li><li><code>Logger</code> 日志中间件，用来记录每一次请求到日志，可以通过配置定义日志格式以及output，echo日志系统见下一节</li><li><code>Recover</code> 将程序从请求处理的panic中恢复，可以配置是否输出错误栈以及输出栈的深度</li><li><code>Body Limit</code> 限制请求体(request body)的大小，通过<code>Content-Length</code>工作。</li><li><code>Request ID</code> 为每次请求生成一个唯一ID</li><li><code>Session</code> 用于会话管理，基于<a href="https://github.com/gorilla/sessions">gorilla/sessions</a></li><li><code>Trailing Slash</code> 为请求URL添加尾部斜杠</li></ul><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>上一节提到了middleware中间件的日志<code>middleware.Logger</code>，它用来记录请求-响应中的一些信息，如请求处理耗时，请求大小，状态码等。</p><p>echo也提供了自己的日志框架：<code>echo.Logger</code>。<code>echo.Logger</code>方便我们在处理请求过程中自定义日志，并且同样可配置。下面是一个通过<a href="https://github.com/lestrrat-go/file-rotatelogs">file-rotatelogs</a>写日志到文件的示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">e := echo.New()</span><br><span class="line"></span><br><span class="line">writer, _ := rotatelogs.New(</span><br><span class="line">    logName+<span class="string">&quot;.%Y%m%d%H&quot;</span>,</span><br><span class="line">    rotatelogs.WithLinkName(logName),</span><br><span class="line">    rotatelogs.WithRotationTime(time.Hour),</span><br><span class="line">    rotatelogs.WithRotationCount(<span class="number">24</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logConf := middleware.LoggerConfig&#123;</span><br><span class="line">    Skipper: <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    Format: <span class="string">`&#123;&quot;time&quot;:&quot;$&#123;time_rfc3339_nano&#125;&quot;,&quot;remote_ip&quot;:&quot;$&#123;remote_ip&#125;&quot;,&quot;host&quot;:&quot;$&#123;host&#125;&quot;,`</span> +</span><br><span class="line">        <span class="string">`&quot;method&quot;:&quot;$&#123;method&#125;&quot;,&quot;uri&quot;:&quot;$&#123;uri&#125;&quot;,&quot;status&quot;:$&#123;status&#125;,&quot;error&quot;:&quot;$&#123;error&#125;&quot;,`</span> +</span><br><span class="line">        <span class="string">`&quot;latency_human&quot;:&quot;$&#123;latency_human&#125;&quot;,&quot;bytes_in&quot;:$&#123;bytes_in&#125;,`</span> +</span><br><span class="line">        <span class="string">`&quot;bytes_out&quot;:$&#123;bytes_out&#125;&#125;`</span> + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    Output: writer,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e.Use(middleware.LoggerWithConfig(logConf))</span><br><span class="line"></span><br><span class="line">e.Logger.SetOutput(writer)</span><br><span class="line">e.Logger.SetHeader(<span class="string">`&#123;&quot;time&quot;:&quot;$&#123;time_rfc3339_nano&#125;&quot;,&quot;level&quot;:&quot;$&#123;level&#125;&quot;,&quot;prefix&quot;:&quot;$&#123;prefix&#125;&quot;,`</span> +</span><br><span class="line">    <span class="string">`&quot;file&quot;:&quot;$&#123;short_file&#125;&quot;,&quot;line&quot;:&quot;$&#123;line&#125;&quot;&#125;`</span>)</span><br><span class="line">e.Logger.SetLevel(log.DEBUG)</span><br><span class="line"></span><br><span class="line">... </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="平滑关闭"><a href="#平滑关闭" class="headerlink" title="平滑关闭"></a>平滑关闭</h3><p>echo支持第三方的<code>Graceful</code>，如标准库的<code>http.Server#Shutdown()</code>、<a href="https://github.com/tylerb/graceful">graceful</a>或者<a href="https://github.com/facebookgo/grace">grace</a>等，下面是官方提供的grace shutdown示例：</p><figure class="highlight go"><figcaption><span>facebook/grace</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/facebookgo/grace/gracehttp&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/labstack/echo&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Setup</span></span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c.String(http.StatusOK, <span class="string">&quot;Six sick bricks tick&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    e.Server.Addr = <span class="string">&quot;:1323&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Serve it like a boss</span></span><br><span class="line">    e.Logger.Fatal(gracehttp.Serve(e.Server))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>graceful</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/labstack/echo&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/tylerb/graceful&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Setup</span></span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c.String(http.StatusOK, <span class="string">&quot;Sue sews rose on slow joe crows nose&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    e.Server.Addr = <span class="string">&quot;:1323&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Serve it like a boss</span></span><br><span class="line">    graceful.ListenAndServe(e.Server, <span class="number">5</span>*time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>echo支持从中间件或者action返回HTTP错误集中处理。这样可以允许我们在统一的地方记录日志提供给第三方或者返回自定义的HTTP响应给客户端，错误可以是<code>error</code>或者<code>*echo.HTTPError</code>。</p><p>下面是一个错误处理的示例：</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> e.Use(<span class="function"><span class="keyword">func</span><span class="params">(next echo.HandlerFunc)</span> <span class="title">echo</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// Extract the credentials from HTTP request header and perform a security</span></span><br><span class="line">    <span class="comment">// check</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// For invalid credentials</span></span><br><span class="line">    <span class="keyword">return</span> echo.NewHTTPError(http.StatusUnauthorized, <span class="string">&quot;Please provide valid credentials&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For valid credentials call next</span></span><br><span class="line">    <span class="comment">// return next(c)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实echo算不上完整的web框架，缺乏像beego等web框架那样对MVC、ORM、cache等的支持。但echo一向以极简主义著称，所有很适合作为嵌入式web服务器，以少量代码提供功能完整多样的http服务。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Quick  start  for RESTful framework echo.&lt;/p&gt;</summary>
    
    
    
    <category term="golang" scheme="https://guodongq.github.io/categories/golang/"/>
    
    <category term="framework" scheme="https://guodongq.github.io/categories/golang/framework/"/>
    
    <category term="RESTful" scheme="https://guodongq.github.io/categories/golang/framework/RESTful/"/>
    
    
    <category term="echo" scheme="https://guodongq.github.io/tags/echo/"/>
    
  </entry>
  
</feed>
